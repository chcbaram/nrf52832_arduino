# Copyright (c) 2016-2017 Arduino Srl.  All right reserved.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# Arduino nRF52 Core and platform.

# compile variables
# ----------------------

name=nRF52 DMTECH
version=1.0.2

# Compile tool path
compiler.path={runtime.tools.arm-none-eabi-gcc.path}/bin/

# Compile s files options
compiler.S.cmd=arm-none-eabi-gcc
compiler.S.flags=-c -g -x assembler-with-cpp -DNRF52


# Compile c files options
compiler.c.cmd=arm-none-eabi-gcc
compiler.c.flags=-DNRF5 -DNRF52 -DS132 -DSOFTDEVICE_PRESENT -DBLE_STACK_SUPPORT_REQD -DCONFIG_GPIO_AS_PINRESET -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_PRIMO -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16 -mthumb -c -g -Os -w -std=gnu99 -ffunction-sections -fdata-sections -fno-builtin -MMD

# Compile cpp files options
compiler.cpp.cmd=arm-none-eabi-g++
compiler.cpp.flags=-DNRF5 -DNRF52 -DS132 -DSOFTDEVICE_PRESENT -DBLE_STACK_SUPPORT_REQD -DCONFIG_GPIO_AS_PINRESET -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_PRIMO -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16 -mthumb -c -g -Os -w -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions -fno-builtin -MMD

# Compile includes

compiler.nrf_api_include="-I{runtime.tools.CMSIS.path}/CMSIS/Include" "-I{runtime.platform.path}/cores/arduino/components/device" "-I{runtime.platform.path}/cores/arduino/components/drivers_nrf/hal" "-I{runtime.platform.path}/cores/arduino/components/drivers_nrf/clock" "-I{runtime.platform.path}/cores/arduino/components/drivers_nrf/common" "-I{runtime.platform.path}/cores/arduino/components/drivers_nrf/config" "-I{runtime.platform.path}/cores/arduino/components/drivers_nrf/delay" "-I{runtime.platform.path}/cores/arduino/components/drivers_nrf/uart" "-I{runtime.platform.path}/cores/arduino/components/drivers_nrf/rng" "-I{runtime.platform.path}/cores/arduino/components/libraries/util" "-I{runtime.platform.path}/cores/arduino/components/libraries/timer" "-I{runtime.platform.path}/cores/arduino/components/libraries/trace" "-I{runtime.platform.path}/cores/arduino/components/libraries/scheduler" "-I{runtime.platform.path}/cores/arduino/components/libraries/uart" "-I{runtime.platform.path}/cores/arduino/components/libraries/softuart" "-I{runtime.platform.path}/cores/arduino/components/libraries/fifo" "-I{runtime.platform.path}/cores/arduino/components/libraries/ecc" "-I{runtime.platform.path}/cores/arduino/components/nfc/ndef/connection_handover/ac_rec" "-I{runtime.platform.path}/cores/arduino/components/nfc/ndef/connection_handover/ep_oob_rec" "-I{runtime.platform.path}/cores/arduino/components/nfc/ndef/connection_handover/hs_rec" "-I{runtime.platform.path}/cores/arduino/components/nfc/ndef/connection_handover/le_oob_rec" "-I{runtime.platform.path}/cores/arduino/components/nfc/ndef/connection_handover" "-I{runtime.platform.path}/cores/arduino/components/nfc/ndef/generic/message" "-I{runtime.platform.path}/cores/arduino/components/nfc/ndef/generic/record" "-I{runtime.platform.path}/cores/arduino/components/nfc/ndef/launchapp" "-I{runtime.platform.path}/cores/arduino/components/nfc/ndef/parser/message" "-I{runtime.platform.path}/cores/arduino/components/nfc/ndef/parser/record" "-I{runtime.platform.path}/cores/arduino/components/nfc/ndef/text" "-I{runtime.platform.path}/cores/arduino/components/nfc/ndef/uri" "-I{runtime.platform.path}/cores/arduino/components/nfc/t2t_lib" "-I{runtime.platform.path}/cores/arduino/components/nfc/t2t_lib/hal_t2t" "-I{runtime.platform.path}/cores/arduino/components/nfc/t2t_parser" "-I{runtime.platform.path}/cores/arduino/components/nfc/t2t_lib" "-I{runtime.platform.path}/cores/arduino/components/ble/common" "-I{runtime.platform.path}/cores/arduino/components/softdevice/s132/headers" "-I{runtime.platform.path}/cores/arduino/components/softdevice/common/softdevice_handler" "-I{runtime.platform.path}/cores/arduino/components/toolchain" "-I{runtime.platform.path}/cores/arduino/components/toolchain/gcc" "-I{runtime.platform.path}/cores/arduino/components/drivers_nrf/pstorage" "-I{runtime.platform.path}/cores/arduino/components/drivers_nrf/pstorage/config" "-I{runtime.platform.path}/cores/arduino/components/libraries/fstorage" "-I{runtime.platform.path}/cores/arduino/components/libraries/fstorage/config" "-I{runtime.platform.path}/cores/arduino/components/libraries/experimental_section_vars" "-I{runtime.platform.path}/cores/arduino/components/ble/device_manager" "-I{runtime.platform.path}/cores/arduino/components/ble/device_manager/config" "-I{runtime.platform.path}/cores/arduino/components/ble/ble_services/ble_dfu" "-I{runtime.platform.path}/cores/arduino/components/libraries/bootloader_dfu" "-I{runtime.platform.path}/cores/arduino/components/ble/ble_advertising"
# Create archives options
compiler.ar.cmd=arm-none-eabi-ar
compiler.ar.flags=rcs

# Combine to create elf file options
compiler.c.elf.cmd=arm-none-eabi-g++

# Create bin file options
compiler.elf2bin.cmd=arm-none-eabi-objcopy
compiler.elf2bin.flags=-O binary

# Create hex file options
compiler.elf2hex.cmd=arm-none-eabi-objcopy
compiler.elf2hex.flags=-O ihex

# Calculate hex size options
compiler.size.cmd=arm-none-eabi-size

# nrF52832 compile patterns
# ------------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {build.extra_flags} {compiler.nrf_api_include} {includes} "{source_file}" -c -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {build.extra_flags} {compiler.nrf_api_include} {includes} "{source_file}" -c -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} {compiler.nrf_api_include} "{source_file}" -c -o "{object_file}"


## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} "{archive_file_path}" "{object_file}"


## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" -mfloat-abi=hard -mfpu=fpv4-sp-d16 -Wl,--gc-sections --specs=nano.specs -mcpu={build.mcu} -mthumb "-T{build.variant.path}/{build.ldscript}" "-Wl,-Map={build.path}/{build.project_name}.map" -Wl,--cref -o "{build.path}/{build.project_name}.elf" "-L{build.path}" -Wl,--warn-common -Wl,--start-group {object_files} "{runtime.platform.path}/cores/arduino/components/nfc/t2t_lib/nfc_t2t_lib_gcc.a" "{build.path}/{archive_file}" -Wl,--end-group


## Create bin
recipe.objcopy.eep.pattern="{compiler.path}{compiler.elf2bin.cmd}" {compiler.elf2bin.flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create hex
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Create merged hex file with softdevice and bootloader
#recipe.objcopy.mergehex.pattern="{tools.mergehex.path}/{tools.mergehex.cmd}" --merge "{runtime.platform.path}/firmwares/{firmware.softdevice.file}" "{runtime.platform.path}/bootloaders/{bootloader.file}" "{build.path}/{build.project_name}.hex" --output "{build.path}/{build.project_name}-merged.hex" {tools.mergehex.upload.params.quiet}
recipe.objcopy.mergehex.pattern="{tools.mergehex.path}/{tools.mergehex.cmd}" --merge "{runtime.platform.path}/firmwares/{firmware.softdevice.file}" "{build.path}/{build.project_name}.hex" --output "{build.path}/{build.project_name}-merged.hex" {tools.mergehex.upload.params.quiet}

## Save hex
recipe.output.tmp_file={build.project_name}.hex
recipe.output.save_file={build.project_name}.{build.variant}.hex

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=\.text\s+([0-9]+).*

#
# OpenOCD
# -------------------

tools.openocd.path={runtime.tools.openocd-0.10.0-arduino1-static.path}
tools.openocd.cmd=bin/openocd
tools.openocd.cmd.windows=bin/openocd.exe

tools.openocd.upload.params.verbose=
tools.openocd.upload.params.quiet=
tools.openocd.upload.pattern="{path}/{cmd}" -s "{path}/share/openocd/scripts/" -f "{runtime.platform.path}/variants/{build.variant}/{build.openocdscript}" -c "program {{{build.path}/{build.project_name}-merged.hex}} verify reset exit"

tools.openocd.erase.params.verbose=
tools.openocd.erase.params.quiet=
tools.openocd.erase.pattern=

tools.openocd.bootloader.params.verbose=
tools.openocd.bootloader.pattern="{path}/{cmd}" -s "{path}/share/openocd/scripts/" -f "{runtime.platform.path}/variants/{build.variant}/{build.openocdscript}" -c "init" -c "halt" -c "nrf52 mass_erase reset exit" -c "shutdown"

#
# Merge Hex - nRF5x Command Line Tools
# -------------------

tools.mergehex.path={runtime.tools.nrf5x-cl-tools-9.3.1.path}
tools.mergehex.cmd=mergehex/mergehex
tools.mergehex.cmd.windows=bin/mergehex.exe
tools.mergehex.upload.params.verbose=
tools.mergehex.upload.params.quiet=--quiet

#
# Upload Tool (Ble OTA)
# -------------------
#tools.otable.path=
#tools.otable.cmd=
#tools.otable.cmd.windows=
#tools.otable.upload.params.verbose=
#tools.otable.upload.params.quiet=
#tools.otable.upload.pattern=

